"use client";

import { Bot, Check, FileQuestion, X, Plus, Loader, RefreshCw } from "lucide-react";
import React, { useState, useEffect } from "react";

interface FAQItem {
  id: string;
  question: string;
  answer: string;
  confidenceLevel: string;
  source: string;
  generatedBy: string;
  category?: string;
  tags?: string[];
}

interface AutoGeneratedFAQsProps {
  knowledgebaseId: string;
  userId: string;
}

const AutoGeneratedFAQs: React.FC<AutoGeneratedFAQsProps> = ({ 
  knowledgebaseId, 
  userId 
}) => {
  const [faqs, setFaqs] = useState<FAQItem[]>([]);
  const [loading, setLoading] = useState(true);
  const [generating, setGenerating] = useState(false);
  const [addingManual, setAddingManual] = useState(false);
  const [newFaq, setNewFaq] = useState({ question: '', answer: '' });
  const [stats, setStats] = useState({
    total: 0,
    averageConfidence: "0%"
  });

  // Fetch FAQs on component mount
  useEffect(() => {
    fetchFAQs();
  }, [knowledgebaseId]);

  const fetchFAQs = async () => {
    try {
      setLoading(true);
      const response = await fetch(
        `/api/ai/knowledgebase/faq?knowledgebaseId=${knowledgebaseId}`
      );
      
      const data = await response.json();
      
      if (data.success) {
        setFaqs(data.data.faqs || []);
        setStats({
          total: data.data.total || 0,
          averageConfidence: data.data.averageConfidence || "0%"
        });
      } else {
        console.error('Failed to fetch FAQs:', data.error);
      }
    } catch (error) {
      console.error('Error fetching FAQs:', error);
    } finally {
      setLoading(false);
    }
  };

  const generateMoreFAQs = async () => {
    try {
      setGenerating(true);
      
      const response = await fetch('/api/ai/knowledgebase/faq', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          knowledgebaseId,
          faqs: [], // Empty array to trigger auto-generation
          options: {
            autoGenerate: true,
            numberOfQuestions: 3 // Generate 3 new FAQs
          }
        })
      });

      const data = await response.json();
      
      if (data.success) {
        // Refresh the FAQ list
        await fetchFAQs();
      } else {
        console.error('Failed to generate FAQs:', data.error);
        alert(`Failed to generate FAQs: ${data.error}`);
      }
    } catch (error) {
      console.error('Error generating FAQs:', error);
      alert('Error generating FAQs. Please try again.');
    } finally {
      setGenerating(false);
    }
  };

  const addManualFAQ = async () => {
    if (!newFaq.question.trim() || !newFaq.answer.trim()) {
      alert('Please enter both question and answer');
      return;
    }

    try {
      setAddingManual(true);
      
      const response = await fetch('/api/ai/knowledgebase/faq', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          knowledgebaseId,
          faqs: [{
            question: newFaq.question,
            answer: newFaq.answer,
            category: 'manual',
            source: 'Manual Entry'
          }]
        })
      });

      const data = await response.json();
      
      if (data.success) {
        setNewFaq({ question: '', answer: '' });
        setAddingManual(false);
        await fetchFAQs(); // Refresh list
      } else {
        alert(`Failed to add FAQ: ${data.error}`);
      }
    } catch (error) {
      console.error('Error adding FAQ:', error);
      alert('Error adding FAQ. Please try again.');
    } finally {
      setAddingManual(false);
    }
  };

  const deleteFAQ = async (faqId: string) => {
    if (!confirm('Are you sure you want to delete this FAQ?')) {
      return;
    }

    try {
      const response = await fetch(
        `/api/ai/knowledgebase/faq?knowledgebaseId=${knowledgebaseId}&faqId=${faqId}`,
        { method: 'DELETE' }
      );

      const data = await response.json();
      
      if (data.success) {
        // Remove from local state immediately for better UX
        setFaqs(prev => prev.filter(faq => faq.id !== faqId));
        setStats(prev => ({ ...prev, total: prev.total - 1 }));
      } else {
        alert(`Failed to delete FAQ: ${data.error}`);
      }
    } catch (error) {
      console.error('Error deleting FAQ:', error);
      alert('Error deleting FAQ. Please try again.');
    }
  };

  const approveFAQ = async (faqId: string) => {
    // Implement approval logic if needed
    console.log('Approving FAQ:', faqId);
    // You might want to update the FAQ status in your database
  };

  if (loading) {
    return (
      <div className="w-full mx-auto p-6 bg-[#171717] rounded-2xl border border-gray-700 shadow-md mt-8">
        <div className="flex items-center justify-center py-8">
          <Loader className="w-8 h-8 animate-spin text-gray-400" />
          <span className="ml-3 text-gray-400">Loading FAQs...</span>
        </div>
      </div>
    );
  }

  return (
    <div className="w-full mx-auto p-4 sm:p-6 lg:p-8 bg-[#171717] rounded-2xl border border-gray-700 shadow-md mt-8">
      {/* Header row */}
      <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
        <div className="flex space-x-4 mb-5">
          <div className="flex w-10 h-10 rounded-full bg-[#262626] justify-center items-center">
            <FileQuestion className="w-5 h-5 text-gray-300" />
          </div>
          <div>
            <h3 className="text-white text-lg font-semibold leading-tight">
              Auto-Generated FAQs
            </h3>
            <span className="text-gray-400 text-xs md:text-sm">
              AI-powered FAQ creation from your content
            </span>
          </div>
        </div>

        <div className="flex flex-wrap gap-3">
          <button 
            onClick={() => setAddingManual(true)}
            className="w-full sm:w-36 lg:w-40 h-10 bg-[#262626] rounded-lg text-sm text-white hover:bg-gray-700 transition flex items-center justify-center"
          >
            <Plus className="w-4 h-4 mr-2" />
            Add FAQ
          </button>
          <button 
            onClick={generateMoreFAQs}
            disabled={generating}
            className="w-full sm:w-36 lg:w-40 h-10 bg-[#262626] rounded-lg text-sm text-white hover:bg-gray-700 transition flex items-center justify-center disabled:opacity-50"
          >
            {generating ? (
              <Loader className="w-4 h-4 mr-2 animate-spin" />
            ) : (
              <RefreshCw className="w-4 h-4 mr-2" />
            )}
            Generate More
          </button>
        </div>
      </div>

      {/* Manual FAQ Addition Modal */}
      {addingManual && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-[#1e1e1e] border border-gray-700 rounded-xl p-6 w-full max-w-md">
            <h3 className="text-white text-lg font-semibold mb-4">Add Manual FAQ</h3>
            <div className="space-y-4">
              <input
                type="text"
                placeholder="Enter question..."
                value={newFaq.question}
                onChange={(e) => setNewFaq(prev => ({ ...prev, question: e.target.value }))}
                className="w-full px-3 py-2 bg-[#2a2a2a] border border-gray-600 rounded text-white placeholder-gray-400 focus:outline-none focus:border-[#ef3e6d]"
              />
              <textarea
                placeholder="Enter answer..."
                value={newFaq.answer}
                onChange={(e) => setNewFaq(prev => ({ ...prev, answer: e.target.value }))}
                rows={4}
                className="w-full px-3 py-2 bg-[#2a2a2a] border border-gray-600 rounded text-white placeholder-gray-400 focus:outline-none focus:border-[#ef3e6d] resize-none"
              />
              <div className="flex gap-3">
                <button
                  onClick={() => setAddingManual(false)}
                  className="flex-1 px-4 py-2 text-gray-300 bg-gray-700 rounded-lg hover:bg-gray-600 transition-colors"
                >
                  Cancel
                </button>
                <button
                  onClick={addManualFAQ}
                  disabled={addingManual}
                  className="flex-1 px-4 py-2 bg-[#ef3e6d] text-white rounded-lg hover:bg-[#d8355d] disabled:opacity-50 transition-colors"
                >
                  {addingManual ? 'Adding...' : 'Add FAQ'}
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Content rows in grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-6">
        {faqs.length === 0 ? (
          <div className="col-span-2 text-center py-8">
            <FileQuestion className="w-12 h-12 text-gray-500 mx-auto mb-4" />
            <p className="text-gray-400">No FAQs generated yet. Click "Generate More" to create FAQs from your content.</p>
          </div>
        ) : (
          faqs.map((item) => (
            <div
              key={item.id}
              className="w-full bg-[#171717] rounded-2xl border border-gray-700 p-5 sm:p-6 lg:p-8 shadow-lg"
            >
              {/* top row */}
              <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
                <div className="flex items-center space-x-4">
                  <div>
                    <h3 className="text-white text-base sm:text-lg font-semibold leading-tight">
                      {item.question}
                    </h3>
                  </div>
                </div>

                {/* Right icons */}
                <div className="flex justify-between space-x-2">
                  <Check 
                    className="w-5 h-5 text-green-500 hover:text-green-400 cursor-pointer transition" 
                    onClick={() => approveFAQ(item.id)}
                    title="Approve FAQ"
                  />
                  <X 
                    className="w-5 h-5 text-red-500 hover:text-red-400 cursor-pointer transition" 
                    onClick={() => deleteFAQ(item.id)}
                    title="Delete FAQ"
                  />
                </div>
              </div>

              {/* Description */}
              <p className="mt-4 sm:mt-5 text-xs sm:text-sm text-gray-300 leading-relaxed">
                {item.answer}
              </p>

              {/* Footer */}
              <div className="flex flex-wrap gap-3 sm:gap-5 mt-4 sm:mt-5 text-gray-400">
                <div className="flex items-center text-xs sm:text-sm">
                  <Bot className="w-4 h-4 mr-1" />
                  <p className="text-xs sm:text-sm">{item.generatedBy}</p>
                </div>
                <p className="text-xs sm:text-sm">Confidence {item.confidenceLevel}</p>
                <p className="text-xs sm:text-sm">Source {item.source}</p>
              </div>
            </div>
          ))
        )}
      </div>

      {/* Bottom Row */}
      <div className="flex flex-col mt-5 md:flex-row md:items-center md:justify-between gap-4 w-full bg-[#171717] rounded-2xl border border-gray-700 p-5 sm:p-6 lg:p-8 shadow-lg">
        <div className="flex space-x-4">
          <div className="flex w-10 h-10 rounded-full bg-[#262626] justify-center items-center">
            <FileQuestion className="w-5 h-5 text-gray-300" />
          </div>
          <div>
            <h3 className="text-white text-lg font-semibold leading-tight">
              {stats.total} FAQs Generated
            </h3>
            <span className="text-gray-400 text-xs md:text-sm">
              Average Confidence: {stats.averageConfidence}
            </span>
          </div>
        </div>

        <div className="flex flex-wrap gap-3">
          <button 
            onClick={fetchFAQs}
            className="w-full sm:w-36 lg:w-40 h-10 bg-[#262626] rounded-lg text-sm text-white hover:bg-gray-700 transition flex items-center justify-center"
          >
            <RefreshCw className="w-4 h-4 mr-2" />
            Refresh
          </button>
        </div>
      </div>
    </div>
  );
};

export default AutoGeneratedFAQs;