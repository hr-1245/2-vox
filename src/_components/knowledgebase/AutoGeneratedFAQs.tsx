"use client";

import { Bot, Check, FileQuestion, X, Plus, Loader, RefreshCw } from "lucide-react";
import React, { useState, useEffect } from "react";

interface FAQItem {
  id: string;
  additionalProp1: string;
  additionalProp2: string;
  additionalProp3:string;
  confidenceLevel: string;
  source: string;
  generatedBy: string;
  category?: string;
  tags?: string[];
}

interface AutoGeneratedFAQsProps {
  knowledgebaseId: string;
  userId: string;
}

const AutoGeneratedFAQs: React.FC<AutoGeneratedFAQsProps> = ({ 
  knowledgebaseId, 
  userId 
}) => {
  const [faqs, setFaqs] = useState<FAQItem[]>([]);
  const [loading, setLoading] = useState(true);
  const [generating, setGenerating] = useState(false);
  const [addingManual, setAddingManual] = useState(false);
  const [newFaq, setNewFaq] = useState({ question: '', answer: '' });
  const [stats, setStats] = useState({
    total: 0,
    averageConfidence: "0%"
  });

  // Fetch FAQs on component mount
  useEffect(() => {
    if (knowledgebaseId) {
      fetchFAQs();
    }
  }, [knowledgebaseId]);

  const fetchFAQs = async () => {
    try {
      setLoading(true);
      console.log('Fetching FAQs for knowledgebase:', knowledgebaseId);
      
      const response = await fetch(
        `/api/ai/knowledgebase/faq?knowledgebaseId=${knowledgebaseId}`
      );
      
      console.log('Fetch response status:', response.status);
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      console.log('Fetched FAQ data:', data);
      
      if (data.success) {
        const faqsData = data.data?.faqs || data.faqs || data.data || [];
        setFaqs(faqsData);
        setStats({
          total: faqsData.length,
          averageConfidence: data.data?.averageConfidence || calculateAverageConfidence(faqsData)
        });
      } else {
        console.error('API returned error:', data.error);
        // Fallback to mock data for testing
        setFaqs(getMockFAQs());
        setStats({ total: 3, averageConfidence: "85%" });
      }
    } catch (error) {
      console.error('Error fetching FAQs:', error);
      // Fallback to mock data
      setFaqs(getMockFAQs());
      setStats({ total: 3, averageConfidence: "85%" });
    } finally {
      setLoading(false);
    }
  };

  // Calculate average confidence from FAQ items
  const calculateAverageConfidence = (faqs: FAQItem[]): string => {
    if (!faqs.length) return "0%";
    
    const total = faqs.reduce((sum, faq) => {
      const confidence = parseInt(faq.confidenceLevel) || 0;
      return sum + confidence;
    }, 0);
    
    return `${Math.round(total / faqs.length)}%`;
  };

  // Mock data for testing
  const getMockFAQs = (): FAQItem[] => [
    {
      id: "1",
      question: "What is the return policy?",
      answer: "You can return items within 30 days of purchase with original receipt.",
      confidenceLevel: "92%",
      source: "Policy Document",
      generatedBy: "AI",
      category: "returns"
    },
    {
      id: "2",
      question: "How do I track my order?",
      answer: "Track your order using the tracking number sent to your email.",
      confidenceLevel: "88%",
      source: "Shipping Info",
      generatedBy: "AI",
      category: "shipping"
    },
    {
      id: "3",
      question: "What payment methods do you accept?",
      answer: "We accept credit cards, PayPal, and bank transfers.",
      confidenceLevel: "95%",
      source: "Payment Info",
      generatedBy: "AI",
      category: "payments"
    }
  ];

  const generateMoreFAQs = async () => {
    try {
      setGenerating(true);
      console.log('Generating FAQs for knowledgebase:', knowledgebaseId);
      
      const response = await fetch('/api/ai/knowledgebase/generate-faqs', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          knowledgebaseId,
          userId,
          options: {
            count: 3, // Generate 3 new FAQs
            autoGenerate: true
          }
        })
      });

      console.log('Generate response status:', response.status);
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log('Generated FAQ response:', data);
      
      if (data.success) {
        const newFAQs = data.data?.faqs || data.faqs || data.data || [];
        
        if (newFAQs.length > 0) {
          // Add new FAQs to existing list
          setFaqs(prev => [...prev, ...newFAQs]);
          setStats(prev => ({ 
            ...prev, 
            total: prev.total + newFAQs.length 
          }));
          alert(`Successfully generated ${newFAQs.length} new FAQs!`);
        } else {
          // If no FAQs returned, add mock data for demonstration
          const mockNewFAQs: FAQItem[] = [
            {
              id: `new-${Date.now()}-1`,
              question: "What are your business hours?",
              answer: "We are open Monday to Friday from 9 AM to 6 PM.",
              confidenceLevel: "90%",
              source: "Generated Content",
              generatedBy: "AI",
              category: "general"
            },
            {
              id: `new-${Date.now()}-2`,
              question: "Do you offer international shipping?",
              answer: "Yes, we ship to over 50 countries worldwide.",
              confidenceLevel: "87%",
              source: "Generated Content",
              generatedBy: "AI",
              category: "shipping"
            }
          ];
          setFaqs(prev => [...prev, ...mockNewFAQs]);
          setStats(prev => ({ 
            ...prev, 
            total: prev.total + mockNewFAQs.length 
          }));
          alert("Generated 2 new FAQs (demo mode)");
        }
      } else {
        console.error('API returned error:', data.error);
        // Fallback to adding mock FAQs
        const mockNewFAQs: FAQItem[] = [
          {
            id: `mock-${Date.now()}`,
            question: "How can I contact customer support?",
            answer: "Contact us via email at support@company.com or call +1-234-567-8900.",
            confidenceLevel: "85%",
            source: "Demo Data",
            generatedBy: "AI",
            category: "support"
          }
        ];
        setFaqs(prev => [...prev, ...mockNewFAQs]);
        setStats(prev => ({ 
          ...prev, 
          total: prev.total + mockNewFAQs.length 
        }));
        alert("Added demo FAQ (API not working)");
      }
    } catch (error) {
      console.error('Error generating FAQs:', error);
      // Add fallback mock FAQ
      const fallbackFAQ: FAQItem = {
        id: `fallback-${Date.now()}`,
        question: "What is your warranty policy?",
        answer: "We offer a 1-year warranty on all products from date of purchase.",
        confidenceLevel: "82%",
        source: "Fallback Data",
        generatedBy: "AI",
        category: "warranty"
      };
      setFaqs(prev => [...prev, fallbackFAQ]);
      setStats(prev => ({ ...prev, total: prev.total + 1 }));
      alert("Added fallback FAQ (check console for errors)");
    } finally {
      setGenerating(false);
    }
  };

  const addManualFAQ = async () => {
    if (!newFaq.question.trim() || !newFaq.answer.trim()) {
      alert('Please enter both question and answer');
      return;
    }

    try {
      setAddingManual(true);
      
      const manualFAQ: FAQItem = {
        id: `manual-${Date.now()}`,
        additionalProp1: newFaq.question.trim(),
        additionalProp2: newFaq.answer.trim(),
        additionalProp3:newFaq.answer.trim(),
        confidenceLevel: "100%",
        source: "Manual Entry",
        generatedBy: "User",
        category: "manual"
      };

      // Add to local state immediately for better UX
      setFaqs(prev => [manualFAQ, ...prev]);
      setStats(prev => ({ ...prev, total: prev.total + 1 }));
      setNewFaq({ question: '', answer: '' });
      setAddingManual(false);

      // Optional: Save to backend
      try {
        const response = await fetch('/api/ai/knowledgebase/faq', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            userId,
            knowledgebaseId,
            faqs: [{
              additionalProp1: manualFAQ.additionalProp1,
              additionalProp2: manualFAQ.additionalProp2,
              additionalProp3: manualFAQ.additionalProp3,
              category: 'manual',
              source: 'Manual Entry'
            }]
          })
        });

        const data = await response.json();
        if (!data.success) {
          console.error('Failed to save FAQ to backend:', data.error);
        }
      } catch (backendError) {
        console.error('Error saving to backend:', backendError);
      }

    } catch (error) {
      console.error('Error adding FAQ:', error);
      alert('Error adding FAQ. Please try again.');
    } finally {
      setAddingManual(false);
    }
  };

  const deleteFAQ = async (faqId: string) => {
    if (!confirm('Are you sure you want to delete this FAQ?')) {
      return;
    }

    try {
      // Remove from local state immediately for better UX
      setFaqs(prev => prev.filter(faq => faq.id !== faqId));
      setStats(prev => ({ ...prev, total: prev.total - 1 }));

      // Try to delete from backend
      const response = await fetch(
        `/api/ai/knowledgebase/faq?knowledgebaseId=${knowledgebaseId}&faqId=${faqId}`,
        { method: 'DELETE' }
      );

      const data = await response.json();
      
      if (!data.success) {
        console.error('Failed to delete FAQ from backend:', data.error);
      }
    } catch (error) {
      console.error('Error deleting FAQ:', error);
      // FAQ was already removed from UI, so we don't show error to user
    }
  };

  const approveFAQ = async (faqId: string) => {
    // Update local state to show approval
    setFaqs(prev => prev.map(faq => 
      faq.id === faqId 
        ? { ...faq, confidenceLevel: "100%", source: "Approved" }
        : faq
    ));
    
    console.log('Approved FAQ:', faqId);
  };

  if (loading) {
    return (
      <div className="w-full mx-auto p-6 bg-[#171717] rounded-2xl border border-gray-700 shadow-md mt-8">
        <div className="flex items-center justify-center py-8">
          <Loader className="w-8 h-8 animate-spin text-gray-400" />
          <span className="ml-3 text-gray-400">Loading FAQs...</span>
        </div>
      </div>
    );
  }

  return (
    <div className="w-full mx-auto p-4 sm:p-6 lg:p-8 bg-[#171717] rounded-2xl border border-gray-700 shadow-md mt-8">
      {/* Header */}
      <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4 mb-6">
        <div className="flex items-center space-x-4">
          <div className="flex w-10 h-10 rounded-full bg-[#262626] justify-center items-center">
            <FileQuestion className="w-5 h-5 text-gray-300" />
          </div>
          <div>
            <h3 className="text-white text-lg font-semibold">Auto-Generated FAQs</h3>
            <p className="text-gray-400 text-sm">AI-powered FAQ creation from your content</p>
          </div>
        </div>

        <div className="flex flex-wrap gap-3">
          <button 
            onClick={() => setAddingManual(true)}
            className="px-4 py-2 bg-[#262626] rounded-lg text-white hover:bg-gray-700 transition flex items-center"
          >
            <Plus className="w-4 h-4 mr-2" />
            Add FAQ
          </button>
          <button 
            onClick={generateMoreFAQs}
            disabled={generating}
            className="px-4 py-2 bg-[#262626] rounded-lg text-white hover:bg-gray-700 transition flex items-center disabled:opacity-50"
          >
            {generating ? (
              <Loader className="w-4 h-4 mr-2 animate-spin" />
            ) : (
              <RefreshCw className="w-4 h-4 mr-2" />
            )}
            Generate More
          </button>
        </div>
      </div>

      {/* Manual FAQ Addition Modal */}
      {addingManual && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-[#1e1e1e] border border-gray-700 rounded-xl p-6 w-full max-w-md">
            <h3 className="text-white text-lg font-semibold mb-4">Add Manual FAQ</h3>
            <div className="space-y-4">
              <input
                type="text"
                placeholder="Enter question..."
                value={newFaq.question}
                onChange={(e) => setNewFaq(prev => ({ ...prev, question: e.target.value }))}
                className="w-full px-3 py-2 bg-[#2a2a2a] border border-gray-600 rounded text-white placeholder-gray-400 focus:outline-none focus:border-blue-500"
              />
              <textarea
                placeholder="Enter answer..."
                value={newFaq.answer}
                onChange={(e) => setNewFaq(prev => ({ ...prev, answer: e.target.value }))}
                rows={4}
                className="w-full px-3 py-2 bg-[#2a2a2a] border border-gray-600 rounded text-white placeholder-gray-400 focus:outline-none focus:border-blue-500 resize-none"
              />
              <div className="flex gap-3">
                <button
                  onClick={() => setAddingManual(false)}
                  className="flex-1 px-4 py-2 text-gray-300 bg-gray-700 rounded-lg hover:bg-gray-600 transition"
                >
                  Cancel
                </button>
                <button
                  onClick={addManualFAQ}
                  className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition"
                >
                  Add FAQ
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* FAQ Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
        {faqs.length === 0 ? (
          <div className="col-span-2 text-center py-12">
            <FileQuestion className="w-16 h-16 text-gray-500 mx-auto mb-4" />
            <h3 className="text-gray-300 text-lg mb-2">No FAQs Yet</h3>
            <p className="text-gray-400 mb-6">Generate FAQs from your content or add them manually.</p>
            <button 
              onClick={generateMoreFAQs}
              className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition"
            >
              Generate First FAQs
            </button>
          </div>
        ) : (
          faqs.map((item) => (
            <div
              key={item.id}
              className="bg-[#1e1e1e] border border-gray-700 rounded-xl p-6 hover:border-gray-600 transition-colors"
            >
              <div className="flex justify-between items-start mb-4">
                <h4 className="text-white font-semibold text-lg flex-1 mr-4">{item.additionalProp1}</h4>
                <div className="flex space-x-2">
                  <Check 
                    className="w-5 h-5 text-green-500 hover:text-green-400 cursor-pointer" 
                    onClick={() => approveFAQ(item.id)}
                  />
                  <X 
                    className="w-5 h-5 text-red-500 hover:text-red-400 cursor-pointer" 
                    onClick={() => deleteFAQ(item.id)}
                  />
                </div>
              </div>
              
              <p className="text-gray-300 text-sm mb-4 leading-relaxed">{item.additionalProp2}</p>
              
              <div className="flex flex-wrap items-center gap-4 text-xs text-gray-400">
                <div className="flex items-center">
                  <Bot className="w-3 h-3 mr-1" />
                  {item.generatedBy}
                </div>
                <span>Confidence: {item.confidenceLevel}</span>
                <span>Source: {item.source}</span>
              </div>
            </div>
          ))
        )}
      </div>

      {/* Stats Footer */}
      <div className="bg-[#1e1e1e] border border-gray-700 rounded-xl p-6">
        <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
          <div className="flex items-center space-x-4">
            <FileQuestion className="w-8 h-8 text-gray-400" />
            <div>
              <h4 className="text-white font-semibold">{stats.total} FAQs Generated</h4>
              <p className="text-gray-400 text-sm">Average Confidence: {stats.averageConfidence}</p>
            </div>
          </div>
          
          <button 
            onClick={fetchFAQs}
            className="px-4 py-2 bg-[#262626] rounded-lg text-white hover:bg-gray-700 transition flex items-center"
          >
            <RefreshCw className="w-4 h-4 mr-2" />
            Refresh
          </button>
        </div>
      </div>
    </div>
  );
};

export default AutoGeneratedFAQs;